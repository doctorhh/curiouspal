ChrisBosh_FG <- c(549,543,507,615,600,524,393,485,492,343)
ChrisPaul_FG <- c(407,381,630,631,314,430,425,412,406,568)
KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
#Field Goal Attempts
KobeBryant_FGA <- c(2173,1757,1690,1712,1569,1639,1336,1595,73,713)
JoeJohnson_FGA <- c(1395,1139,1497,1420,1386,1161,931,1052,1018,1025)
LeBronJames_FGA <- c(1823,1621,1642,1613,1528,1485,1169,1354,1353,1279)
CarmeloAnthony_FGA <- c(1572,1453,1481,1207,1502,1503,1025,1489,1643,806)
DwightHoward_FGA <- c(881,873,974,979,834,1044,726,813,800,423)
ChrisBosh_FGA <- c(1087,1094,1027,1263,1158,1056,807,907,953,745)
ChrisPaul_FGA <- c(947,871,1291,1255,637,928,890,856,870,1170)
KevinDurant_FGA <- c(647,647,1366,1390,1668,1538,1297,1433,1688,467)
DerrickRose_FGA <- c(436,436,436,1208,1373,1597,695,0,164,835)
DwayneWade_FGA <- c(1413,962,937,1739,1511,1384,837,1093,761,1084)
#Matrix
FieldGoalAttempts <- rbind(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
rm(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
colnames(FieldGoalAttempts) <- Seasons
rownames(FieldGoalAttempts) <- Players
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
Salary
Games
class(Games)
dim(Games)
getwd()
setwd('C:\Users\hharvey\Dropbox\R\Advance R')
setwd('C:/Users/hharvey/Dropbox/R/Advance R')
fin <- read.csv('futur-500.csv')
fin <- read.csv('Futur-500.csv')
fin <- read.csv('Future-500.csv')
head(fin)
names(fin)
str(fin)
install.packages(c("curl", "dplyr", "xts"))
setwd("~/Documents/Development/R/curiouspal/Garmin")
library(readr)
test_csv_3 <- read.csv('1870951038_data.csv')
getwd()
setwd("~/Documents/Development/R/curiouspal/Garmin/Data/Jan_2017")
test_csv_3 <- read.csv('1870951038_data.csv')
test_csv_4 <- read.csv('1856977174_data.csv') #stringAsFactor=FALSE & Header=FALSE
head(test_csv_3)
library(readr)
str(test_csv_3)
r_csv_1 <- read_csv('1870951038_data.csv')
r_csv_1 <- read_csv('1870951038_data.csv',header=FALSE)
?read_csv
r_csv_1 <- read_csv('1870951038_data.csv')
r_csv_1 <- read_csv('1870951038_data.csv',col_names = TRUE)
r_csv_1 <- read_csv('1870951038_data.csv',col_names = FALSE)
?spec
spec(r_csv_1)
str(r_csv_1)
str(test_csv_3)
View(MinutesPlayed)
View(test_csv_3)
library(data.table)
?fread
fr_csv_1 <- fread('1870951038_data.csv')
str(fr_csv_1)
str(test_csv_3)
str(r_csv_1)
r_csv_1 <- read_csv('1870951038_data.csv')
str(r_csv_1)
fr_csv_1 <- fread('1870951038_data.csv')
str(fr_csv_1)
?fread
fr_csv_1 <- fread('1870951038_data.csv', drop = 28)
str(fr_csv_1)
class(fr_csv_1)
sizeof
object.size(fr_csv_1)
object.size(r_csv_1)
object.size(test_csv_1)
object.size(test_csv_3)
?read.csv
str(test_csv_3)
str(r_csv_1)
r_csv_1 <- read_csv('1870951038_data.csv', col_skip(X28))
r_csv_1 <- read_csv('1870951038_data.csv', col_skip=28)
r_csv_1 <- read_csv('1870951038_data.csv', col_skip=X28)
>col_skip()
?col_skip
r_csv_1 <- read_csv('1870951038_data.csv', col_types=cols (X28 = col_skip()))
str(r_csv_1)
r_csv_1 <- read_csv('1870951038_data.csv', col_types=cols (28 = col_skip()))
r_csv_1 <- read_csv('1870951038_data.csv', col_types=cols (X28 = col_skip()))
str(r_csv_1)
object.size(r_csv_1)
object.size(fr_csv_1)
object.size(test_csv_3)
r_csv_1 <- read_csv('1870951038_data.csv')
object.size(r_csv_1)
object.size(test_csv_3)
object.size(fr_csv_1)
str(test_csv_3)
str(r_csv_1)
str(fr_csv_1)
View(test_csv_3)
View(test_csv_4)
as_datetime(869731650)
library(lubridate)
as_datetime(869731650)
as_datetime(869121097)
Sys.time()
as.POSIXct(869121097)
?as.POSIXct
as.POSIXct(869121097, tz='CEST')
as.POSIXct(869121097, tz='CEST', origin='1970-01-01')
as.POSIXct(869121097, tz='CEST', origin='1970-01-01')
as.POSIXct(869121097, tz='CET', origin='1970-01-01')
setwd("~/Dropbox/R/trackeR/Data/Mar_2017/CSV")
test_csv_mar<- read.csv('1602103088_data.csv') #stringAsFactor=FALSE & Header=FALSE
View(test_csv_mar)
as.POSIXct(857546868, tz='CET', origin='1970-01-01')
setwd("~/Documents/Development/R/curiouspal/MFP")
mfp <- read.csv('mfp_Jan_Jul_2017.csv',stringsAsFactors=F)
View(mfp)
str(mfp)
View(test_csv_4)
View(test_csv_4)
setwd("~/Documents/Development/R/curiouspal/Oura")
file <- fromJSON('oura_Jan2017.json')
library(jsonlite)
file <- fromJSON('oura_Jan2017.json')
file$sleep
str(file$sleep)
head(file$sleep)
file <- fromJSON('Jan_Jul_2017.json')
file <- fromJSON('oura_Jan2017.json')
file <- fromJSON('Jan_Jul_2017.json')
file <- fromJSON('response.json')
hr <- file$sleep$hr_5min[[1]]
rmssd <- file$sleep$rmssd_5min[[1]]
file$sleep$rmssd_5min
file$sleep$rmssd_5min[[1]]
file$sleep$rmssd_5min[[2]]
file$sleep$rmssd_5min[[3]]
file$sleep$rmssd_5min[[140]]
file$sleep$rmssd_5min[[125]]
hr_avg <- rep(file$sleep$hr_average[1], length(file$sleep$hr_5min[[1]]))
day <- rep(file$sleep$summary_date[1] , length(file$sleep$hr_5min[[1]]))
s_date <- file$sleep$bedtime_start[1]
e_date <- file$sleep$bedtime_end[1]
s_pdate <- ymd_hms(s_date, tz = "CET")
e_pdate <- ymd_hms(e_date, tz = "CET")
time_spam <- seq.POSIXt(s_pdate,e_pdate,by='5 min')
df_oura <- data.frame(Day = as.character(), HR = as.integer(),
HR_AVG=as.integer(),Time = as.Date(character()))
df_day <- data.frame(Day = day, HR=hr, HR_AVG=hr_avg, Time=time_spam)
df_oura <- rbind(df_oura,df_day)
View(df_oura)
str(file)
class(file$sleep)
colnames(file$sleep)
file$sleep['total']
file$sleep[,'total']
file$sleep$hypnogram_5min[1]
length(file$sleep$hypnogram_5min[1])
nrow(file$sleep$hypnogram_5min[1])
nchar(file$sleep$hypnogram_5min[1])
View(df_oura)
file$sleep$hr_average
df_oura %>% summary(avg = mean(hr))
library(dplyr)
df_oura %>% summary(avg = mean(hr))
df_oura %>% summarise(avg = mean(hr))
file$sleep$hr_average
file$sleep$hr_5min[1]
length(file$sleep$hr_5min[1])
nchar(file$sleep$hr_5min[1])
nrow(file$sleep$hr_5min[1])
file$sleep$hr_5min[[1]]
file$sleep$hr_5min[2]
mean(file$sleep$hr_5min[2])
class(file$sleep$hr_5min[2])
hr <- file$sleep$hr_5min[[2]]
rmssd <- file$sleep$rmssd_5min[[2]]
hr_avg <- rep(file$sleep$hr_average[2], length(file$sleep$hr_5min[[2]]))
day <- rep(file$sleep$summary_date[2] , length(file$sleep$hr_5min[[2]]))
s_date <- file$sleep$bedtime_start[2]
e_date <- file$sleep$bedtime_end[2]
s_pdate <- ymd_hms(s_date, tz = "CET")
e_pdate <- ymd_hms(e_date, tz = "CET")
time_spam <- seq.POSIXt(s_pdate,e_pdate,by='5 min')
df_oura <- data.frame(Day = as.character(), HR = as.integer(),
HR_AVG=as.integer(),Time = as.Date(character()))
df_day <- data.frame(Day = day, HR=hr, HR_AVG=hr_avg, Time=time_spam)
df_oura <- rbind(df_oura,df_day)
View(df_oura)
df_oura %>% summarise(avg = mean(hr))
df_oura_clean <- df_oura %>% filter(HR != 0)
df_oura_clean %>% summarise(avg = mean(hr))
View(df_oura_clean)
df_oura %>% summarise(avg = mean(hr))
nrow(df_oura$HR)
class(df_oura)
nrow(df_oura)
nrow(df_oura_clean)
df_oura$HR
df_oura_clean$HR
mean(df_oura$HR)
mean(df_oura_clean$HR)
hr <- file$sleep$hr_5min[[3]]
rmssd <- file$sleep$rmssd_5min[[3]]
hr_avg <- rep(file$sleep$hr_average[3], length(file$sleep$hr_5min[[3]]))
day <- rep(file$sleep$summary_date[3] , length(file$sleep$hr_5min[[3]]))
s_date <- file$sleep$bedtime_start[3]
e_date <- file$sleep$bedtime_end[3]
s_pdate <- ymd_hms(s_date, tz = "CET")
e_pdate <- ymd_hms(e_date, tz = "CET")
time_spam <- seq.POSIXt(s_pdate,e_pdate,by='5 min')
df_oura <- data.frame(Day = as.character(), HR = as.integer(),
HR_AVG=as.integer(),Time = as.Date(character()))
df_day <- data.frame(Day = day, HR=hr, HR_AVG=hr_avg, Time=time_spam)
df_oura <- rbind(df_oura,df_day)
df_oura_clean <- df_oura %>% filter(HR != 0)
mean(df_oura$HR)
mean(df_oura_clean$HR)
df_oura$HR
df_oura_clean$HR
View(df_oura)
View(mfp)
str(mfp)
library(stringr)
mfp$Foods[1]
class(mfp$Foods[1])
length(mfp$Foods[1])
str_length(mfp$Foods[1])
str_split(mfp$Foods[1],' ')
length(str_split(mfp$Foods[1],' '))
str_count(str_split(mfp$Foods[1],' '))
v<-str_split(mfp$Foods[1],' ')
v
v{1}
v[1]
v[[1]]
v<-strsplit(mfp$Foods[1],' ')
v[[1]]
v[1]
v[[1]]
parse_character(mfp$Foods[1])
?parse_character
?str_split
v<-str_split(mfp$Foods[1],' ')
v[[1]]
v[[1]]which(nchar(v[[1]]) !=0)
v[[1]][which(nchar(v[[1]]) !=0)]
'coffee' %in% v
'coffee' %in% v[[1]]
v<-str_split(mfp$Foods[2],' ')
v
v<-str_split(mfp$Foods[3],' ')
v
v<-str_split(mfp$Foods[4],' ')
v
'reis' %in$ v[[1]]
'reis' %in% v[[1]]
str_detect(v,'reis')
str_detect(v,c('reis','riz','rice')
)
str_detect(v,c('reis','riz','rice'))
str_detect(v,c('reis','riz','rice')) > 0
sum(str_detect(v,c('reis','riz','rice'))) > 0
str_detect(v,c('reis','riz','rice')) > 0
head(mfp$Foods,20)
tail(mfp$Foods,20)
tail(mfp$Foods,30)
head(mfp$Foods,30)
v<-str_split(mfp$Foods[7],' ')
'potato' %in$ v[[1]]
'potato' %in% v[[1]]
?rebus
library(rebus)
install.packages('rebus')
library(rebus)
?rebus
str_subset(v,pattern = 'otate')
v
str_subset(v,pattern = 'otat')
str_detect(v,pattern = 'otat')
str_extract(v,pattern = 'otat')
str_extract(v,pattern = 'potat')
str_detect(v,pattern = 'potat')
setwd("~/Documents/Development/R/curiouspal/Nokia")
nokia_measure <- fromJSON('measure_Jan_Jul_2017.JSON', simplifyDataFrame = TRUE)
measurement <- bind_rows(nokia_measure$body$measuregrps)
type_unit_col <- bind_rows(measurement$measures)
date_list<-list(unique(measurement$date))
dates_col <- unlist(lapply(date_list,function(x) rep(x,each=5)))
View(type_unit_col)
View(measurement)
View(type_unit_col)
type_unit_col %>% filter(type==c(1,5,6,8))
type_unit_col %>% filter(unit!=0)
temp_df <- type_unit_col %>% filter(unit!=0)
date_list<-list(unique(measurement$date))
dates_col <- unlist(lapply(date_list,function(x) rep(x,each=4)))
nrow(date_col)
nrow(dates_col)
length(dates_col)
nrow(temp_df)
temp_df %>% group_by(type) %>% summarise(n=n())
type_unit_col %>% group_by(type) %>% summarise(n=n())
v
str_detect(v, patter=capture((ANY_CHAR) %R% 'otato'))
str_extract(v, patter=capture((ANY_CHAR) %R% 'otato'))
str_match(v, patter=capture((ANY_CHAR) %R% 'otato'))
v
v[[1]]
v[[1]][1]
v[[1]][3]
v[[1]][3] <-
'potato'
v
str_detect(v, patter=capture((ANY_CHAR) %R% 'otato'))
str_extract(v, patter=capture((ANY_CHAR) %R% 'otato'))
str_match(v, patter=capture((ANY_CHAR) %R% 'otato'))
v
str_match(v, patter=capture(ANY_CHAR) %R% 'otato')
str_match(v, patter=capture(ANY_CHAR) %R% 'otat')
str_match(v, patter=capture(ANY_CHAR) %R% 'otato')
v[[1]][3] <- 'potato'
str_match(v, patter=capture(ANY_CHAR) %R% 'otato')
v[[1]][3] <- 'kotato'
str_match(v, patter=capture(ANY_CHAR) %R% 'otato')
str_match_all(v, patter=capture(ANY_CHAR) %R% 'otato')
v[[1]][3] <- 'potato'
str_match_all(v, patter=capture(ANY_CHAR) %R% 'otato')
setwd("~/Documents/Development/R/curiouspal/Restwise")
Rest_file<- read.csv('Jan-Jul_2017.csv')
rest_file<- read.csv('Jan-Jul_2017.csv')
head(rest_file)
str(rest_file)
rest_file$Date<-as.Date()
rest_file$Date<-as.Date(rest_file$Date)
str(rest_file)
is.na(rest_file)
rest_file[,-1]
rest_file<-rest_file[,-1]
str(rest_file)
rest_file<-rest_file[,-1]
str(rest_file)
rest_file<- read.csv('Jan-Jul_2017.csv')
rest_file$Date<-as.Date(rest_file$Date)
rest_file[,-1]
rest_file[,1]
rest_file[,-(1)]
rest_file[,-'Comments']
rest_file[,'Comments']
library(dplyr)
rest_file %>% select(-Comments)
rest_file <- rest_file %>% select(-Comments)
head(rest_file)
rest_file %>% plot(Heart.Rate,SP02)
plot(rest_file$Heart.Rate, rest_file$SP02)
plot(rest_file$Date, rest_file$SP02)
plot(rest_file$Date, rest_file$Heart.Rate)
write.csv(rest_file,'Jan_Jul_2017_clean.csv')
rest_file<- read.csv('Jan-Jul_2017.csv')
rest_file$Date<-as.Date(rest_file$Date)
rest_file <- rest_file %>% select(-Comments)
write.csv(rest_file,'Jan_Jul_2017_clean.csv')
setwd("~/Documents/Development/R/curiouspal/SleepCycle")
sleepcylcle_file <- read.csv('sleepdata-2.csv')
str(sleepcylcle_file)
sleepcylcle_file <- read.csv('sleepdata-2.csv', sep = ';')
str(sleepcylcle_file)
library(readr)
sleepdata_2 <- read_delim("sleepdata-2.csv", ";", escape_double = FALSE, trim_ws = TRUE)
str(sleepdata_2)
library(dplyr)
sleepcylcle_file$Start <- as.POSIXct(sleepcylcle_file$Start)
sleepcylcle_file$End <- as.POSIXct(sleepcylcle_file$End)
str(sleepcylcle_file)
sleepcylcle_file$Sleep.quality
sleepcylcle_file$Sleep.quality <- as.character(sleepcylcle_file$Sleep.quality)
sleepcylcle_file$Time.in.bed
sleepcylcle_file$Time.in.bed <- as.character(sleepcylcle_file$Time.in.bed)
sc_file <- sleepcylcle_file %>% select(-c(Heart.rate,Activity..steps.))
sc_file <- sleepcylcle_file %>% select(-c(Heart.rate, Wake.up, Activity..steps.))
sc_file$Sleep.Notes
View(test_csv_3)
rm(test_csv_3)
rm(test_csv_4)
rm(Rest_file)
rm(sleepcylcle_file)
rm(sleepdata_2)
rm(test_csv_mar)
v
str_subset(v,regex('potato',ignore_case = TRUE))
str_subset(v,regex('potato',ignore.case = TRUE))
v
starch<-regex("POTATO",ignore_case=TRUE)
str_subset(v,starch)
str_view(v,starch)
str_extract(v,starch)
v[1]
v<-str_split(mfp$Foods[7],' ')
mfp$Foods[7]
line<-mfp$Foods[7]
str_extract(line,starch)
line
v
readline(mfp$Foods[7])
v<-readline(mfp$Foods[7])
v
stringi::stri_read_lines
stringi::stri_read_lines(mfp$Foods[7])
v<-mfp$Foods[7]
v
str_extract(line,starch)
str_extract(v,starch)
str_view(v,starch)
str_subset(v,starch)
v
starch
starch <- regex('potato',ignore_case=TRUE)
starch
library(rebus)
starch <- regex('potato',ignore.case=TRUE)
str_subset(v,starch)
?regex
starch <- regex('potato',ignore_case=TRUE)
str_subset(v,starch)
v
str_subset(v,'Potato')
str_extract(v,'Potato')
str_extract(v,regex('potato',ignore_case=TRUE))
str_extract(v,'Potato', ignore.case=TRUE)
str_extract(v,'Potato', ignore_case=TRUE)
str_extract(v,regex("POTATO",ignore_case=TRUE))
starch <- regex("POTATO",ignore_case=TRUE)
str_extract(v,starch)
class(v)
getwd()
setwd("~/Documents/Development/R")
ls()
dir()
util<-read.csv('Machine-Utilization.csv')
str(util)
head(util)
head(util,10)
summary(util)
summary(util)
head(util,10)
util$Utilisation <- 1 - util$Percent.Idle
head(util,10)
as.POSIXct(util$Timestamp, format='%d/%m/%Y %H:%M')
util$PosixTime <- as.POSIXct(util$Timestamp, format='%d/%m/%Y %H:%M')
head(util,10)
util$Timestamp <- NULL
util <- util[,c(4,1,2,3)]
head(util)
RL1 <- util[util$Machine=='RL1',]
RL1
summary(RL1)
RL1$Machine <- factor(RL1$Machine)
summary(RL1)
util_stats_rl1 <- c(min(util$Utilisation, na.rm = T),mean(util$Utilisation, na.rm = T),max(util$Utilisation, na.rm = T))
util_stats_rl1
util_under_90 <-
which(RL1$Utilisation < 0.90)
util_under_90 <-
which(RL1$Utilisation < 0.90)
which(RL1$Utilisation < 0.90)
util_under_90 <- length(which(RL1$Utilisation < 0.90)) > 0
util_under_90
list_rl1 <- list('RL1',util_stats_rl1, util_under_90)
list_rl1
names(list_rl1)
names(list_rl1) <- c('Machine','Stats','LowThreshold')
names(list_rl1)
list_rl1
list_rl1$LowThreshold
list_rl1$Stats
list_rl1$Stats[1]
list_rl1$Stats[2]
list_rl1$Stats[[1]]
file
str(file)
class(file)
typeof(file)
class(file$sleep)
typeof(file$sleep)
file_fread <- fread('response.json')
setwd("~/Documents/Development/R/curiouspal/Oura")
file_fread <- fread('response.json')
file_fread <- read.csv('response.json')
rm(file_fread)
