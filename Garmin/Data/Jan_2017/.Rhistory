sub(pattern = "^[a-z]", replacement = "X", x = random_words)
library(purrr)
df <- data.frame(
x = c(NA, 19.7, 2.5, 17.2),
y = c(11.5, 15.3, NA, 1.8)
)
map(df, mean)
map(df, mean,2)
?map
map(df, mean, 2)
map(df, mean, x)
map(df, mean, [])
map(df, mean, [)
map(df, mean, '[')
map(df, mean, '[[')
month <- list(
x = c("Jun", "May", "Apr"),
y = c("Dec", "Oct", "Nov")
)
month$x
month$x[3]
str(fin)
fin <- read.csv('Future-500.csv')
summary(fin)
str(fin)
fin$Profit <- factor(fin$Profit)
str(fin)
fin$Profit <- as.numeric(fin$Profit)
str(fin)
fin <- read.csv('Future-500.csv')
str(fin)
?sub
head(fin)
library(httr)
library(jsonlite)
oura_name <- 'CuriousPal' # chosen by user
oura_client_id  <- 'AEK3GDQG66C4AHVS' # an integer, assigned by Strava
oura_secret <- 'HAZ7HWIMFHLK2MVWPKJTL5MEMXX4OXXT' # an alphanumeric secret
oura_scope <- 'daily'
oura_redirect <- 'http://localhost:1410'
oura_url <- "https://cloud.ouraring.com/oauth/authorize"
compact <- function(x) Filter(Negate(is.null), x)
authorize_url <- modify_url(oura_url, query = compact(list(
response_type = "token",
state = 'XXX',
redirect_uri = oura_redirect,
client_id = oura_client_id)))
authorize_url
oura_name <- 'CuriousPal' # chosen by user
oura_client_id  <- 'AEK3GDQG66C4AHVS' # an integer, assigned by Strava
oura_secret <- 'HAZ7HWIMFHLK2MVWPKJTL5MEMXX4OXXT' # an alphanumeric secret
oura_scope <- 'daily'
oura_redirect <- 'http://localhost:1410'
oura_url <- "https://cloud.ouraring.com/oauth/authorize"
oura_token <- ''
compact <- function(x) Filter(Negate(is.null), x)
authorize_url <- modify_url(oura_url, query = compact(list(
response_type = "token",
state = 'XXX',
redirect_uri = oura_redirect,
client_id = oura_client_id)))
BROWSE(authorize_url)
BROWSE(authorize_url)
https://cloud.ouraring.com/oauth/authorize?client_id=AEK3GDQG66C4AHVS&scope=&redirect_uri=http%3A%2F%2Flocalhost%3A1410%2F&response_type=code&state=z1b84FF11w
authorize_url
BROWSE(authorize_url)
oura_redirect <- 'https://www.getpostman.com/oauth2/callback'
authorize_url <- modify_url(oura_url, query = compact(list(
response_type = "token",
state = 'XXX',
redirect_uri = oura_redirect,
client_id = oura_client_id)))
BROWSE(authorize_url)
https://api.health.nokia.com/measure?action=getmeas&userid=8691078'&startdate=1497744000&enddate=1498608000
getwd()
setwd('~/Dropbox/R/Hankix')
scrape = readHTMLTable('Jan_Jul_2017.html', header=F)
library(XML)
scrape = readHTMLTable('Jan_Jul_2017.html', header=F)
min.date = '2017-01-01'
max.date = '2017-07-01'
date = seq(as.Date(min.date, "%Y-%m-%d"), as.Date(max.date, "%Y-%m-%d"), by=1)
theurl = paste("http://www.myfitnesspal.com/reports/printable_diary/", 'hharvey22', "?from=", min.date, "&to=" , max.date, sep="")
scrape = readHTMLTable(theurl, header=F)
ns = c("Foods" ,   "Calories" ,"Carbs" ,   "Fat"     , "Protein"  ,"Cholest" , "Sodium"  , "Sugars" ,  "Fiber"  )
str(scrape)
class(scrape)
?write.csv()
write.csv(scrape,file='mfp.csv')
?write
?save
save(scrape,'mfp.RData')
save(scrape,file='mfp.RData')
library(dplyr)
library(lubridate)
library(stringi)
tables = data.frame()
for(i in 1:length(scrape)){
if(ncol(scrape[[i]])==length(ns)){
day = rep(date[i],nrow(scrape[[i]]))
print(date[i])
temp =  data.frame(scrape[[i]], day)
tables = rbind(tables, temp)
}
else {
tables = tables
print(paste(date[i],'exercices'))
}
}
day_df <- data.frame()
tables <- data.frame()
date_idx <- 0
for (i in 1:length(scrape)){
# Food dataframe
if(ncol(scrape[[i]])==9){
date_idx <- date_idx + 1
# clean and tidy food dataframe
day_df <- scrape[[i]]
names(day_df) <- ns
day_df[-1] <- apply(day_df[,-1], 2, function(y) as.numeric(gsub("[a-zA-Z]", "", y)))
day_df[,1] <- as.character(day_df[,1])
day_df$Day <- date[date_idx]
day_df$Meal <- 'meal'
#replace Meal with category
for (i in 1: nrow(day_df)){
if (is.na(day_df$Calories[i])){
m <- day_df$Foods[i]
}
else {
day_df$Meal[i] <- m
}
}
tables <-rbind(tables,day_df)
}
# exclude if exercice dataframe
else{
day_df <- day_df
}
}
warning()
warnings()
tables = na.omit(tables)
tables$Foods <- stri_trans_general(tables$Foods, "latin-ascii")
head(tables)
head(tables)
head(tables)
tail(tables)
View(tables)
tables %>% group_by(Day) %>% summarise(n= n())
tables %>% group_by(Day) %>% summarise(n= n(Day))
tables %>% group_by(Day) %>% summarise(n= sum(Day))
tables %>% group_by(Day) %>% summarise(n= n())
tables %>% filter(Day='2017-01-01')
tables %>% filter(Day=='2017-01-01')
tables %>% filter(Day=='2017-03-15')
str(tables)
is.na(tables)
sum(is.na(tables))
write.csv(tables,'mfp_Jan_Jul_2017.csv')
?load()
mfp<=load('mfp.RData')
mfp <- load('mfp.RData')
identical(mfp,scrape)
mfp
scrape
save(scrape)
?save()
saveRDS(scrape,file='mfp.RData')
mfp <- readRDS('mfp.RData')
identical(mfp,scrape)
rm(mfp)
mfp <- read.csv('mfp_Jan_Jul_2017.csv')
identical(mfp,tables)
mfp
class(mfp)
class(tables)
str(mfp)
str(tables)
write.csv()
?write.csv()
mfp <- read.csv('mfp_Jan_Jul_2017.csv',StringsAsFactors=F)
mfp <- read.csv('mfp_Jan_Jul_2017.csv',stringsAsFactors=F)
str(mfp)
identical(mfp,tables)
str(tables)
?read.csv()
row.names()
row.names(mfp)
mfp <- read.csv('mfp_Jan_Jul_2017.csv',stringsAsFactors=F, row.names = FALSE)
mfp <- read.csv('mfp_Jan_Jul_2017.csv',stringsAsFactors=F, row.names = 'FALSE')
mfp <- read.csv('mfp_Jan_Jul_2017.csv',stringsAsFactors=F, row.names = 1)
row.names(mfp)
str(mfp)
identical(mfp,tables)
str(tables)
write.csv(tables,'mfp_Jan_Jul_2017.csv',row.names=FALSE)
mfp <- read.csv('mfp_Jan_Jul_2017.csv',stringsAsFactors=F, row.names = 1)
mfp <- read.csv('mfp_Jan_Jul_2017.csv',stringsAsFactors=F)
identical(mfp,tables)
str(mfp)
str(tables)
mfp$Day <- as.Date(mfp$Day)
str(mfp)
identical(mfp,tables)
str(tables)
library(httr)
library(jsonlite)
library(tidyjson)
library(lubridate)
https://api.health.nokia.com/measure?action=getmeas&userid=8691078&startdate=1483228800&enddate=1498867200
https://developer.health.nokia.com/account/authorize?oauth_consumer_key=21c500f4d6de863b31b9738fd870768e723c6df6826d3669645f21076d231&oauth_nonce=4f285e245640e2c3f477464ec124cba4&oauth_signature=ZVf2bviokXd%2FsL21Dihfd6iPolk%3D&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1499164974&oauth_token=8008d7f37110ecc07209bdbf0942928efb4372e71c8790c71f8556fd46&oauth_version=1.0
file_nokia <- fromJSON('http://api.health.nokia.com/measure?action=getmeas&oauth_consumer_key=21c500f4d6de863b31b9738fd870768e723c6df6826d3669645f21076d231&oauth_nonce=4afd6a06c752b0b98bcc3ff9924aeee4&oauth_signature=db5nCz9CV240fh1Kl%2BPqVJL28bI%3D&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1500819467&oauth_token=8008d7f37110ecc07209bdbf0942928efb4372e71c8790c71f8556fd46&oauth_version=1.0&userid=8691078&startdate=1483228800&enddate=1498867200')
view(file_nokia)
nokia_measure <- fromJSON('measure_Jan_Jul_2017.JSON', simplifyDataFrame = TRUE)
file_nokia$body$measuregrps
nokia_measure <- nokia_file
nokia_measure <- file_nokia
measurement <- bind_rows(nokia_measure$body$measuregrps)
type_unit_col <- bind_rows(measurement$measures)
date_list<-list(unique(measurement$date))
dates_col <- unlist(lapply(date_list,function(x) rep(x,each=5)))
nokia_df <- cbind(dates_col,type_unit_col)
nokia_df
dates_col
type_unit_col
length(type_unit_col)
nrow(type_unit_col)
nrow(dates_col)
nrow(date_list)
measurement$date
length(measurement$date)
str(measurement)
type_unit_col
length(type_unit_col)
nrow(type_unit_col)
851/5
date_list
length(date_list)
nrow(date_list)
nrow(date_list[[1]])
length(date_list[[1]])
174*4
dates_col
length(dates_col)
nrow(type_unit_col)
head(type_unit_col)
View(type_unit_col)
setwd()
getwd()
write(file_nokia, file='file_nokia.txt')
class(file_nokia)
save(file_nokia, file='file_nokia.RData)
save(file_nokia, file='file_nokia.RData')
test <- load('file_nokia.RData')
saveRDS(file_nokia, file='file_nokia.RData')
test <- readRDS('file_nokia.RData')
library(jsonlite)
library(dplyr)
library(ggplot2)
library(purrr)
library(parsedate)
library(stringr)
library(lubridate)
library(zoo)
library(xts)
setwd('~/GitHub/curiouspal/Oura') # windows Laptop
getwd()
setwd('~/Documents/Development/R/curiouspal/Oura')
file <- fromJSON('Jan_Jul_2017.json')
hr <- file$sleep$hr_5min[[1]]
rmssd <- file$sleep$rmssd_5min[[1]]
hr_avg <- rep(file$sleep$hr_average[1], length(file$sleep$hr_5min[[1]]))
day <- rep(file$sleep$summary_date[1] , length(file$sleep$hr_5min[[1]]))
s_date <- file$sleep$bedtime_start[1]
e_date <- file$sleep$bedtime_end[1]
s_pdate <- ymd_hms(s_date, tz = "CET")
e_pdate <- ymd_hms(e_date, tz = "CET")
time_spam <- seq.POSIXt(s_pdate,e_pdate,by='5 min')
df_oura <- data.frame(Day = as.character(), HR = as.integer(), RMSSD = as.integer(),
HR_AVG=as.integer(),Time = as.Date(character()))
df_day <- data.frame(Day = day, HR=hr, RMSSD=rmssd, HR_AVG=hr_avg, Time=time_spam)
View(day_df)
View(df)
df_oura <- data.frame(Day = as.character(), HR = as.integer(), RMSSD = as.integer(),
HR_AVG=as.integer(),Time = as.Date(character()))
View(df_oura)
df_day <- data.frame(Day = day, HR=hr, RMSSD=rmssd, HR_AVG=hr_avg, Time=time_spam)
rmssd <- file$sleep$rmssd_5min[[1]]
file$sleep$rmssd_5min[[1]]
file$sleep$hr_5min[[1]]
hr_avg
day
rmssd
str(file)
df_oura <- data.frame(Day = as.character(), HR = as.integer(),
HR_AVG=as.integer(),Time = as.Date(character()))
df_day <- data.frame(Day = day, HR=hr, HR_AVG=hr_avg, Time=time_spam)
df_oura <- rbind(df_oura,df_day)
df_oura_clean <- df_oura %>% filter(HR != 0)
df_oura %>% group_by(Day) %>% summarise(avg=mean(HR))
View(df_oura)
file
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
library(RJSONIO)
oura_name <- 'CuriousPal' # chosen by user
oura_client_id  <- 'AEK3GDQG66C4AHVS' # an integer, assigned by Strava
oura_secret <- 'HAZ7HWIMFHLK2MVWPKJTL5MEMXX4OXXT' # an alphanumeric secret
oura_scope <- 'daily'
oura_redirect <- 'http://localhost:1410'
oura_url <- "https://cloud.ouraring.com/oauth/authorize"
oura_token <- ''
oura_redirect <- 'https://www.getpostman.com/oauth2/callback'
compact <- function(x) Filter(Negate(is.null), x)
authorize_url <- modify_url(oura_url, query = compact(list(
response_type = "token",
state = 'XXX',
redirect_uri = oura_redirect,
client_id = oura_client_id)))
BROWSE(authorize_url)
file<-fromJSON('https://api.ouraring.com/v1/sleep?start=2017-01-01&end=2017-07-1&access_token=E3G2LMUZG4DVBNO4ZLBM6IBL2ACKKXD5')
write_json(file,'oura_Jan2017.json')
oura_JSON <- fromJSON('oura_Jan2017.JSON')
file <- fromJSON('oura_Jan2017.json')
hr <- file$sleep$hr_5min[[1]]
hr_avg <- rep(file$sleep$hr_average[1], length(file$sleep$hr_5min[[1]]))
file
file$sleep
file$sleep
class(file)
class(oura_JSON)
str(file)
head(str(file))
file$sleep[1]
library(purrr)
getwd()
setwd('~/Dropbox/R/trackeR/Data/Jan_2017')
library(XML)
doc = xmlParse("activity_1504854593.tcx")
doc
nodes <- getNodeSet(doc, "//ns:Trackpoint", "ns")
rows <-  lapply(nodes, function(x) data.frame(xmlToList(x) ))
rows <-  lapply(nodes, function(x) data.frame(xmlToList(x) ))
basic = xmlToDataFrame(nodes <- getNodeSet(doc, "//ns:Trackpoint", "ns"))
View(basic)
extra = do.call("rbind", xpathApply(doc, "//ns3:TPX", function(N) {
data.frame(
Watts = xmlValue(N[["Watts"]]),
Speed = xmlValue(N[["Speed"]])
)
}))
library(trackeR)
TCX_file <- readContainer('activity_1504854593.tcx')
str(TCX_file)
run_file <- changeUnits(TCX_file, variable = "speed", unit = "km_per_h")
run_df <- as.data.frame(run_file)
str(doc)
str(basic)
getwd()
GPX_file <- readContainer('20160508-065751-Run.gpx')
library(plyr)
filename <- "20160508-065751-Run.gpx"
gpx.raw <- xmlTreeParse(filename, useInternalNodes = TRUE)
rootNode <- xmlRoot(gpx.raw)
gpx.rawlist <- xmlToList(rootNode)$trk
gpx.list <- unlist(gpx.rawlist[names(gpx.rawlist) == "trkseg"], recursive = FALSE)
gpx <- do.call(rbind.fill, lapply(gpx.list, function(x) as.data.frame(t(unlist(x)), stringsAsFactors=F)))
names(gpx) <- c("ele", "time", "hr", "lon", "lat")
str(gpx)
install.packages('cycleRtools')
library(cycleRtools)
read_fit('1498536874-GIR.fit')
read_fit('1498536874-GIR.fit')
library(devtools)
install_github('kuperov/fit')
library(fit)
data <- read.fit('1498536874-GIR.fit')
install.packages("fitdc")
library(fitdc)
read_fit('1498536874-GIR.fit')
fp <- system.file("1498536874-GIR.fit", package = "fitdc")
read_fit(fp)
library(cycleRtools)
read_fit('1498536874-GIR.fit')
test_csv <- read.csv('1498713125-GIR.csv'')
test_csv <- read.csv('1498713125-GIR.csv')
test_csv <- read.csv('1498713125-GIR.csv')
str(test_csv)
View(test_csv)
test_csv <- read.csv('1498713125-GIR.csv', skip=20)
View(test_csv)
test_csv <- read.csv('1498713125-GIR.csv', skip=19)
test_csv <- read.csv('1498713125-GIR.csv', skip=19)
View(test_csv)
test_csv <- read.csv('1498713125-GIR.csv', skip=20)
View(test_csv)
test_csv <- read.csv('1498713125-GIR.csv')
class(test_csv)
rnow(test_csv)
nrow(test_csv)
test_csv[20:nrow(test_csv)-10,]
fit_csv<-test_csv[20:nrow(test_csv)-10,]
View(fit_csv)
fit_csv<-test_csv[20:nrow(test_csv),]
fit_csv<-test_csv[20:(nrow(test_csv)-10),]
test_csv <- read.csv('1500797272-GIR.csv')
fit_csv<-test_csv[20:(nrow(test_csv)-10),]
View(fit_csv)
test_csv_2 <- read.csv('1870951038.csv')
fit_csv_2<-test_csv[32:(nrow(test_csv)-20),]
View(fit_csv_2)
fit_csv_2<-test_csv_2[32:(nrow(test_csv)-20),]
View(fit_csv_2)
fit_csv_2<-test_csv_2[33:(nrow(test_csv)-20),]
View(fit_csv_2)
Sys.time(869731650)
as.date(869731650)
as.Date.POSIXct(869731650)
install.packages('anytime')
library(anytime)
anytime(869731650)
anytime(869731667)
anytime(869869734818)
anytime(869734817)
anytime(869734818)
?`anytime-package`
library(lubridate)
?`lubridate-package`
parse_date_time(869734817)
as_date(869734817)
as_datetime(869734817)
as_datetime(869734817) + 30
as_datetime(869731650)
as_datetime(869731650)
as_datetime(869734818)
View(fit_csv_2)
taiL(fit_csv_2[1:10,])
tail(fit_csv_2[1:10,])
fit_csv_2[1,]
str(fit_csv_2)
test_csv_2 <- read.csv('1870951038.csv')
fit_csv_2<-test_csv_2[33:(nrow(test_csv)-20),]
str(fit_csv_2)
fit_csv_2$X...Type
str(fit_csv_2)
fit_csv_2$Value.1
fit_csv_2$Value.4
tail(fit_csv_2$Value.4)
test_csv_3 <- read.csv('1870951038_data.csv')
View(test_csv_3)
as_datetime(869731650)
as_datetime(869737267)
a<-as_datetime(869731650)
b<-as_datetime(869737267)
b-a
interval(a,b)
interval(b,a)
a %--% b
dur<-interval(b,a)
time_length((dur))
time_length((dur,'hour'))
time_length(dur, "year")
hour
time_length(dur, "hour")
time_length(dur, "min")
dur<-interval(a,b)
time_length(dur, "min")
time_length(dur, "min")
time_length(as.duration(dur), "min")
time_length(as.duration(dur), "hour")
stamp(869737267)
stamp_date(stamp_date(x, locale = Sys.getlocale("LC_TIME")), locale = Sys.getlocale("LC_TIME"))
stamp_date(869737267, locale = Sys.getlocale("LC_TIME"))
as_datetime(869737267)
date<-as_datetime(869737267)
date + 30(years)
date + 30 (years)
date + 30 (year)
date + 30
date + 30(month)
year(date) + 20
year(date) + 20
date %m+% months(1)
date %y+% years(20)
date %m+% years(20)
getwd)_
getwd()
test_csv_3 <- read.csv('1870951038_data.csv')
View(test_csv_3)
test_csv_4 <- read.csv('1856977174_data.csv')
View(test_csv_4)
test_csv_4 <- read.csv('1856977174_data.csv')
View(test_csv_4)
date<-as_datetime(869121097)
date %m+% years(20)
str(temp)
temp[1.]
temp[1,]
temp[2]
temp[2,]
temp[2,1]
temp[[2,1]]
temp[[2,2]]
temp[2,2]
temp[2,'V2']
temp['V2']
temp[2]
temp[,2]
temp[1,]
temp[2,]
